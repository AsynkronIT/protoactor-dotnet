syntax = "proto3";
package cluster;
option csharp_namespace = "Proto.Cluster";

import "Proto.Actor/Protos.proto";

//request response call from Identity actor sent to each member
//asking what activations they hold that belong to the requester
message IdentityHandoverRequest {
    uint64 event_id = 1;
    string address = 2;
    repeated Member members = 3;
}

//response message to the above
message IdentityHandoverResponse {
    repeated Activation actors = 1;
}

message ClusterIdentity{
    string identity = 1;
    string kind = 2;
}

message Activation {
    actor.PID pid = 1;
    ClusterIdentity cluster_identity = 2;
}

message ActivationTerminated {
    actor.PID pid = 1;
    ClusterIdentity cluster_identity = 2;
}

message ActivationRequest {
    ClusterIdentity cluster_identity = 1;
    string request_id = 2;
}

message ActivationResponse {
    actor.PID pid = 1;
}


message GrainRequest {
    int32 method_index = 1;
    bytes message_data = 2;
}

message GrainResponse {
    bytes message_data = 1;
}

message GrainErrorResponse {
    string err = 1;
}

message Member {
    string host = 1;
    int32 port = 2;
    string id = 3;
    repeated string kinds = 4;
}

message ClusterTopology {
    uint64 event_id = 1;
    repeated Member members = 2;
    repeated Member joined = 3;
    repeated Member left = 4;
    repeated Member banned = 5;
}

message HeartbeatRequest {
}

message HeartbeatResponse {
  uint32 actor_count = 1;
  string member_id = 2;
  uint32 membership_hash_code = 3;
}

message ClusterTopologyNotification {
  string member_id = 1;
  uint32 membership_hash_code = 2;
  string leader_id = 3;
}

message GracefulShutdown {
  string member_id = 3;
}


//two GossipState objects can be merged
//key + member_id gets it's own entry, if collision, highest version is selected
message GossipState {
  repeated GossipKeyValue entries = 1;  
}

//a known key might be heartbeat. if we locally tag each entry with a local timestamp 
//this means that we can measure if we have not received a new heartbeat from one member in some time
//even if we don't know the exact time the heartbeat was issued, due to clock differences.
//we still know when _we_ as in this node, got this data.
//and we can measure time from then til now.
//
//if we got a hearbeat from another node, and X seconds pass, we can assume it to be dead
message GossipKeyValue { 
  string member_id = 1; //id of the member issuing this value
  int64 version = 2; //version is local to the owner member
  string key = 3; //key or state identifier, e.g. "known-members"
  bytes value = 4; //value is any format
}